<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.example.backend.mapper.DepartmentEmployeeMapper">
	<resultMap id="departmentEmployeeMap"
		type="com.example.backend.dto.mapping.DepartmentEmployeeDto">
		<result property="employeeSeq" column="employee_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="workplaceSeq" column="workplace_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentSeq" column="department_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="companySeq" column="company_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="employeeName" column="employee_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeCode" column="employee_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeId" column="employee_id"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeePh" column="employee_ph"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeePicture" column="employee_picture"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeCall" column="employee_call"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="companyCode" column="company_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="workplaceName" column="workplace_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="companyName" column="company_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentName" column="department_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeePmail" column="employee_pmail"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeCmail" column="employee_cmail"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeBirth" column="employee_birth"
			javaType="java.sql.Date" jdbcType="DATE" />
		<result property="authSeq" column="auth_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentParent" column="department_parent"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentDepth" column="department_depth"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="duty" column="duty"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="position" column="position"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="mainCompanyYN" column="main_company_yn"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="mainDepartmentYN" column="main_department_yn"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentLoc" column="department_loc"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentCall" column="department_call"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentFax" column="department_fax"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentZipCode"
			column="department_zipcode" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result property="dutyCode" column="duty_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="positionCode" column="position_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeJoin" column="employee_join"
			javaType="java.sql.Date" jdbcType="DATE" />
		<result property="employeeLeave" column="employee_leave"
			javaType="java.sql.Date" jdbcType="DATE" />
		<result property="employeeClassification"
			column="employee_classification" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result property="companyHomepage" column="company_homepage"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property = "employeePwd" column = "employee_pwd"
			javaType = "java.lang.String" jdbcType = "VARCHAR" />
		<result property = "approvalPwd" column = "approval_pwd"
			javaType = "java.lang.String" jdbcType = "VARCHAR"/>
		<result property = "employeeAddr" column = "employee_addr"
			javaType = "java.lang.String" jdbcType = "VARCHAR" />
		<result property = "useYN" column = "use_yn"
			javaType = "java.lang.String" jdbcType = "VARCHAR"/>
		<result property = "employeeGender" column = "employee_gender"
			javaType = "java.lang.String" jdbcType = "VARCHAR" />
		<result property = "employeeLanguage" column = "employee_language"
			javaType = "java.lang.String" jdbcType = "VARCHAR"/>
		<result property = "employeeHcall" column = "employee_hcall"
			javaType = "java.lang.String" jdbcType = "VARCHAR"/>
	</resultMap>

	<select id="getList"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT
		de.employee_seq,
		de.workplace_seq,de.department_seq,
		de.company_seq,
		e.employee_name,
		e.employee_id,
		e.employee_ph,
		e.employee_picture, e.employee_call,
		c.company_name,
		w.workplace_name,
		e.employee_birth, d.department_name,
		c.company_homepage,e.employee_cmail, cod.duty, cod.position
		FROM
		department_employee de
		join
		department d
		on
		de.department_seq =
		d.department_seq
		join
		employee e
		on
		de.employee_seq = e.employee_seq
		join
		company c
		on
		de.company_seq =
		c.company_seq
		join
		workplace w
		on
		de.workplace_seq = w.workplace_seq
		JOIN
		(
		SELECT
		dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM
		code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code,
		pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE
		code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		<where>
			<if
				test="companySeq != null and companySeq !='' and employeeSeq != 999">
				AND de.company_seq = #{companySeq}
			</if>
			<if
				test="workplaceSeq != null and workplaceSeq !=''  and employeeSeq != 999">
				AND de.workplace_seq = #{workplaceSeq}
			</if>
			<if
				test="departmentSeq != null and departmentSeq !=''  and employeeSeq != 999">
				AND de.department_seq = #{departmentSeq}
			</if>
			<if test="employeeName != null and employeeName !=''">
				And e.employee_name like CONCAT('%',#{employeeName},'%')
			</if>
		</where>
		ORDER BY workplace_seq
		ASC,
		department_seq ASC,
		employee_seq ASC
	</select>

	<select id="getListByDepartment"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT
		de.company_seq,de.workplace_seq,de.department_seq,de.employee_seq,w.workplace_name,d.department_name,
		c.company_name,e.employee_name,e.employee_pmail,
		e.employee_cmail,cod.duty,cod.position ,c.company_homepage,
		e.employee_id
		FROM
		department_employee de
		JOIN
		department d
		ON
		de.department_seq =
		d.department_seq
		JOIN
		employee e
		ON
		de.employee_seq =
		e.employee_seq
		JOIN
		company c
		ON
		de.company_seq = c.company_seq
		JOIN
		workplace w
		ON
		de.workplace_seq = w.workplace_seq
		JOIN
		(
		SELECT
		dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM
		code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code,
		pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE
		code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		WHERE
		de.department_seq
		= #{departmentSeq}
	</select>

	<select id="getEmployeeInfo"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		select * from department_employee de
		join employee e
		on
		de.employee_seq = e.employee_seq
		join department d
		on
		de.department_seq =
		d.department_seq
		join company c
		on
		de.company_seq = c.company_seq
		join
		workplace w
		on
		de.workplace_seq = w.workplace_seq
		JOIN
		(
		SELECT
		dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM
		code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code,
		pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE
		code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		where
		de.employee_seq =
		#{employeeSeq}
		and
		de.company_seq=#{companySeq}
	</select>

	<select id="getEmployeeCount"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultType="int">
		SELECT DISTINCT
		COUNT(de.employee_seq)
		FROM
		department_employee de
		JOIN
		department d
		ON
		de.department_seq =
		d.department_seq
		JOIN
		employee e
		ON
		de.employee_seq =
		e.employee_seq
		JOIN
		company c
		ON
		de.company_seq = c.company_seq
		JOIN
		workplace w
		ON
		de.workplace_seq = w.workplace_seq
		WHERE
		de.department_seq
		=
		#{departmentSeq}
	</select>

	<select id="getInfo"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT de.company_seq, de.workplace_seq, de.department_seq,
		de.employee_seq, de.main_company_yn, de.main_department_yn,
		cod.duty,cod.position , e.employee_name,
		c.company_name,
		c.company_code,
		w.workplace_name, d.department_name, e.employee_picture
		from
		department_employee de
		JOIN employee e
		ON
		de.employee_seq =
		e.employee_seq
		JOIN company c
		ON
		de.company_seq = c.company_seq
		JOIN
		workplace w
		ON
		de.workplace_seq = w.workplace_seq
		JOIN department d
		ON
		de.department_seq = d.department_seq
		JOIN
		(
		SELECT dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code, pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		WHERE de.employee_seq = #{employeeSeq}
		ORDER BY de.main_company_yn
		DESC, de.main_department_yn desc
	</select>

	<select id="getCompanyElement"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT DISTINCT de.company_seq, c.company_name from
		department_employee de
		JOIN
		company c ON de.company_seq=
		c.company_seq
		JOIN workplace w ON
		de.workplace_seq =
		w.workplace_seq
		JOIN department d
		ON
		de.department_seq =
		d.department_seq
		<where>
			<if
				test="companySeq != null and companySeq !='' and employeeSeq != 999">
				de.company_seq = #{companySeq}
			</if>
		</where>
	</select>

	<select id="getWorkplaceList"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">

		SELECT DISTINCT de.company_seq, c.company_name,
		de.workplace_seq,
		w.workplace_name from
		department_employee de
		JOIN
		company c ON
		de.company_seq= c.company_seq
		JOIN workplace w ON
		de.workplace_seq
		= w.workplace_seq
		WHERE de.company_seq = #{companySeq}

	</select>

	<select id="getDepartmentList"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">

		SELECT DISTINCT de.company_seq, c.company_name,
		de.workplace_seq,
		w.workplace_name, de.department_seq,
		d.department_name from
		department_employee de
		JOIN company c ON
		de.company_seq= c.company_seq
		JOIN workplace w ON de.workplace_seq
		=
		w.workplace_seq
		JOIN department d ON de.department_seq =
		d.department_seq
		WHERE de.company_seq = #{companySeq}

	</select>

	<select id="getMyInfo"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT * FROM
		department_employee de
		JOIN
		company c ON
		de.company_seq = c.company_seq
		JOIN
		employee e ON de.employee_seq =
		e.employee_seq
		JOIN
		(
		SELECT dres.detail_code as
		duty_code,
		dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code, pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		WHERE de.employee_seq = #{employeeSeq} AND
		de.company_seq =
		#{companySeq}
	</select>

	<select id="getListByAuth"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT distinct
		de.company_seq,de.workplace_seq,de.department_seq,de.employee_seq,w.workplace_name,d.department_name,
		c.company_name,e.employee_name,e.employee_pmail,
		e.employee_cmail,c.company_homepage,
		cod.duty,cod.position ,
		e.employee_id
		FROM
		department_employee de
		JOIN
		department d
		ON
		de.department_seq = d.department_seq
		JOIN
		employee e
		ON
		de.employee_seq =
		e.employee_seq
		JOIN
		company c
		ON
		de.company_seq =
		c.company_seq
		JOIN
		workplace w
		ON
		de.workplace_seq = w.workplace_seq
		JOIN
		auth_employee ae
		ON
		de.employee_seq=ae.employee_seq
		JOIN
		(
		SELECT
		dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM
		code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code,
		pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE
		code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		WHERE
		de.company_seq=#{companySeq}
		AND
		ae.auth_seq=#{authSeq};
	</select>


	<select id="getDepartmentGroup"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT d.company_seq, d.workplace_seq, d.department_seq,
		d.department_code,
		d.department_name, d.department_parent, d.department_depth,d.department_call,d.department_fax,department_loc,
		d.use_yn, c.company_name, w.workplace_name FROM
		department d
		JOIN company c
		on c.company_seq = d.company_seq
		JOIN workplace w
		on w.workplace_seq = d.workplace_seq
		WHERE d.company_seq = #{companySeq} and
		d.department_parent = #{departmentParent} and
		d.department_depth =
		#{departmentDepth} and
		d.workplace_seq = #{workplaceSeq}
	</select>

	<select id="getDepartmentCount"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultType="INTEGER">
		select
		count(*)
		from department
		WHERE company_seq =
		#{companySeq} and
		department_parent = #{departmentParent} and
		department_depth = #{departmentDepth} and
		workplace_seq =
		#{workplaceSeq}
	</select>

	<!-- 회사 seq에 해당하는 사원 조회 -->
	<select id="getCompanyEmp"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		select e.employee_seq, e.employee_name, e.employee_birth
		from department_employee de
		join employee e
		on de.employee_seq =
		e.employee_seq
		where de.company_seq = #{companySeq}
	</select>

	<select id="getTree"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		WITH recursive cte AS (
		SELECT d.department_seq,
		d.department_parent,
		d.department_name, d.department_depth
		FROM
		department d
		JOIN
		department_employee de
		ON d.department_seq =
		de.department_seq
		WHERE
		d.department_seq=#{departmentSeq} AND
		de.employee_seq=#{employeeSeq} AND
		de.company_seq=#{companySeq}
		UNION
		ALL
		SELECT d2.department_seq,
		d2.department_parent, d2.department_name,
		d2.department_depth
		FROM cte
		INNER JOIN department d2
		ON
		cte.department_parent = d2.department_seq
		)
		SELECT * FROM cte ORDER BY
		department_depth
	</select>

	<select id="getDeptTree"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		WITH recursive cte AS (
		SELECT department_seq,
		department_parent, department_name, department_depth
		FROM department
		WHERE department_seq=#{departmentSeq}
		UNION ALL
		SELECT d.department_seq,
		d.department_parent, d.department_name,
		d.department_depth
		FROM cte
		INNER JOIN department d
		ON cte.department_parent = d.department_seq
		)
		SELECT * FROM cte ORDER BY department_depth
	</select>

	<select id="getBelongNames"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto"
		resultMap="departmentEmployeeMap">
		SELECT distinct c.company_name, de.company_seq,
		d.department_name, de.department_seq,
		d.department_call,
		d.department_fax, d.department_loc,
		e.employee_seq, de.main_company_yn,
		w.workplace_seq, w.workplace_name,
		de.main_department_yn,
		cod.duty,
		cod.position, d.department_zipcode,de.duty_code, de.position_code,
		ce.employee_code, ce.employee_join, ce.employee_leave,
		ce.employee_classification
		FROM department_employee de
		JOIN
		company_employee ce
		ON de.employee_seq = ce.employee_seq
		AND
		de.company_seq = ce.company_seq
		JOIN company c
		ON de.company_seq =
		c.company_seq
		JOIN workplace w
		ON de.workplace_seq = w.workplace_seq
		JOIN department d
		ON de.department_seq = d.department_seq
		JOIN employee
		e
		ON de.employee_seq = e.employee_seq
		JOIN (
		SELECT dres.detail_code as
		duty_code, dres.detail_code_name AS duty,
		pres.detail_code AS
		position_code,pres.detail_code_name AS position
		FROM
		(SELECT dcode.code,
		dcode.detail_code, dcode.detail_code_name
		FROM
		code dcode
		WHERE
		code='DUTY') dres,
		(SELECT pcode.code,
		pcode.detail_code,
		pcode.detail_code_name
		FROM code pcode
		WHERE
		code='POSITION') pres
		) cod
		ON
		de.position_code = cod.position_code
		AND
		de.duty_code = cod.duty_code
		WHERE
		de.employee_seq =
		#{employeeSeq}
	</select>

	<select id="getDepartmentSelectList" parameterType="int"
		resultMap="departmentEmployeeMap">
		SELECT
		DISTINCT w.workplace_name, d.department_name,
		w.workplace_seq,
		d.department_seq
		FROM department_employee ce
		RIGHT JOIN
		workplace w ON w.workplace_seq =
		ce.workplace_seq
		right JOIN
		department d
		ON d.workplace_seq = ce.workplace_seq
		where
		ce.company_seq =
		#{companySeq}
	</select>

	<select id="getAllCompany" parameterType="int"
		resultMap="departmentEmployeeMap">
		SELECT company_seq, company_name from company
	</select>

	<select id="getPosition" resultMap="departmentEmployeeMap">
		select detail_code as
		position_code, detail_code_name as position from code where code =
		'POSITION'
	</select>
	<select id="getDuty" resultMap="departmentEmployeeMap">
		select detail_code as duty_code,
		detail_code_name as duty from code where code = 'DUTY'
	</select>

	<update id="updateGroupInfo"
		parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto">
		update department_employee as de, company_employee as ce
		set 
		de.company_seq = #{companySeq}, de.workplace_seq = #{workplaceSeq}, de.department_seq = #{departmentSeq}
		, de.main_company_yn = #{mainCompanyYN}, de.main_department_yn = #{mainDepartmentYN}, de.position_code = #{positionCode},
		de.duty_code = #{dutyCode}, 
		ce.company_seq = #{companySeq}, ce.workplace_seq = #{workplaceSeq}, ce.department_seq = #{departmentSeq},
		ce.employee_join = #{employeeJoin}, ce.employee_leave = #{employeeLeave}, ce.employee_classification = #{employeeClassification}
		where 
		de.company_seq = #{firstCompanySeq} and de.workplace_seq = #{firstWorkplaceSeq} and de.department_seq = #{firstDepartmentSeq} and 
		de.employee_seq = #{employeeSeq}
		and 
		ce.company_seq = #{firstCompanySeq} and ce.workplace_seq = #{firstWorkplaceSeq} and ce.department_seq = #{firstDepartmentSeq} and 
		ce.employee_seq = #{employeeSeq}
	</update>
	
	<insert id = "insertGroupInfo"
	 parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto">
		insert
		into department_employee values(#{companySeq},#{workplaceSeq},#{departmentSeq},#{employeeSeq},#{mainCompanyYN}, #{mainDepartmentYN},#{positionCode}
		,#{dutyCode})
	</insert>
	<insert id = "insertCompanyGroupInfo"
	parameterType="com.example.backend.dto.mapping.DepartmentEmployeeDto">
	insert
		into company_employee values(#{companySeq}, #{workplaceSeq}, #{departmentSeq}, #{employeeSeq}, #{employeeCode}, #{employeeJoin}, #{employeeLeave}
		,#{employeeClassification})
	</insert>
	<insert id = "insertBasicInfo"
	parameterType = "com.example.backend.dto.mapping.DepartmentEmployeeDto">
		insert into employee
		values (#{employeeSeq}, #{employeeId}, #{employeeName}, #{employeeBirth}, #{employeeCall}, #{employeePwd}, #{employeePh}, #{employeePmail},
		#{employeeCmail}, #{employeeAddr}, #{employeePicture}, #{useYN}, #{employeeGender}, #{employeeLanguage}, #{approvalPwd},#{employeeHCall}, #{employeeJoin}
		,#{employeeLeave})
	</insert>
	<select id = "getInsertSeq"
	parameterType = "com.example.backend.dto.mapping.DepartmentEmployeeDto"  resultType = "int">
		select employee_seq from employee where employee_id = #{employeeId} and employee_name = #{employeeName}
	</select>
	<update id = "updateBasicInfo"
	parameterType = "com.example.backend.dto.mapping.DepartmentEmployeeDto">
		update employee set
		employee_id = #{employeeId}, employee_name = #{employeeName}, employee_birth = #{employeeBirth}, employee_call = #{employeeCall},
		employee_pwd = #{employeePwd}, employee_ph = #{employeePh}, employee_pmail = #{employeePmail}, employee_cmail = #{employeeCmail},
		employee_addr = #{employeeAddr}, employee_picture = #{employeePicture}, use_yn = #{useYN}, employee_gender = #{employeeGender},
		employee_language = #{employeeLanguage}, approval_pwd = #{approvalPwd}, employee_hcall = #{employeeHCall}, employee_join = #{employeeJoin},
		employee_leave = #{employeeLeave} where employee_seq = #{employeeSeq}
	</update>
</mapper>
