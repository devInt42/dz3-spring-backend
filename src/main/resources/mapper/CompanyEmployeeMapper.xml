<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.example.backend.mapper.CompanyEmployeeMapper">
	<resultMap id="companyEmployeeMap"
		type="com.example.backend.dto.mapping.CompanyEmployeeDto">
		<result property="employeeSeq" column="employee_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="workplaceSeq" column="workplace_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentSeq" column="department_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="companySeq" column="company_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="companyCode" column="company_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeId" column="employee_id"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeePwd" column="employee_pwd"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="companyName" column="company_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeName" column="employee_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeBirth" column="employee_birth"
			javaType="java.lang.String" jdbcType="VARCHAR" />
<result property="employeeCode" column="employee_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
	</resultMap>

	<select id="check"
		parameterType="com.example.backend.dto.mapping.CompanyEmployeeDto"
		resultMap="companyEmployeeMap">
		SELECT
		ce.company_seq, ce.department_seq, ce.workplace_seq,
		ce.employee_seq, e.employee_id, e.employee_pwd, c.company_code
		FROM
		company_employee ce
		JOIN
		employee e
		ON
		ce.employee_seq = e.employee_seq
		JOIN
		company c
		ON
		ce.company_seq =
		c.company_seq
		WHERE
		employee_id =
		#{employeeId}
		AND
		company_code =
		#{companyCode}
		AND employee_pwd =
		#{employeePwd}
		AND e.use_yn = 'Y'
	</select>
	<select id="response"
		parameterType="com.example.backend.dto.mapping.CompanyEmployeeDto"
		resultMap="companyEmployeeMap">
		SELECT
		ce.company_seq, ce.department_seq, ce.workplace_seq,
		ce.employee_seq, c.company_code
		FROM
		company_employee ce
		JOIN
		employee e
		ON
		ce.employee_seq
		= e.employee_seq
		JOIN
		company c
		ON
		ce.company_seq =
		c.company_seq
		WHERE
		employee_id = #{employeeId}
		AND company_code =
		#{companyCode}
		AND
		employee_pwd = #{employeePwd}
		AND e.use_yn = 'Y'

	</select>
	<select id="getList"
		parameterType="com.example.backend.dto.mapping.CompanyEmployeeDto"
		resultMap="companyEmployeeMap">
		SELECT distinct ce.company_seq, c.company_name FROM
		company_employee ce
		JOIN
		employee e
		ON
		ce.employee_seq = e.employee_seq
		JOIN
		company c
		ON
		ce.company_seq = c.company_seq
		<where>
			<if test="companySeq != null and companySeq !=''">
				AND ce.company_seq = #{companySeq}
			</if>
		</where>
	</select>

	<select id="getEmployeeList"
		parameterType="com.example.backend.dto.mapping.CompanyEmployeeDto"
		resultMap="companyEmployeeMap">
		SELECT*FROM company_employee ce
		JOIN employee e
		ON
		ce.employee_seq =
		e.employee_seq
		where
		1=1
		<if test="companySeq != null and companySeq !=''">
			AND ce.company_seq = #{companySeq}
		</if>
		<if test="employeeName != null and employeeName !=''">
			AND(
			e.employee_name like CONCAT('%',#{employeeName},'%')
			or
			e.employee_id like CONCAT('%',#{employeeName},'%')
			or
			e.employee_cmail like CONCAT('%',#{employeeName},'%')
			)
		</if>

	</select>

</mapper> 