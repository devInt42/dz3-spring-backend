<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.backend.mapper.AuthEmployeeMapper">
	<resultMap id="authEmployeeMap"
		type="com.example.backend.dto.mapping.AuthEmployeeDto">
		<result property="authSeq" column="auth_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="employeeSeq" column="employee_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="workplaceSeq" column="workplace_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentSeq" column="department_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="companySeq" column="company_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="authName" column="auth_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="companyName" column="company_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="authCode" column="auth_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="departmentCode" column="department_code"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="departmentName" column="department_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeName" column="employee_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="workplaceName" column="workplace_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="title" column="title"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="employeeId" column="employee_id"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="menuSeq" column="menu_seq"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="menuCode" column="menu_code"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="menuName" column="menu_name"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result property="menuParent" column="menu_parent"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="menuDepth" column="menu_depth"
			javaType="java.lang.Integer" jdbcType="INTEGER" />
		<result property="menuUrl" column="menu_url"
			javaType="java.lang.String" jdbcType="VARCHAR" />
	</resultMap>

	<select id="getAuthListByCompany"
		parameterType="com.example.backend.dto.mapping.AuthEmployeeDto"
		resultMap="authEmployeeMap">
		SELECT
		a.auth_seq,
		a.company_seq, a.auth_name, c.company_name,
		a.auth_code
		FROM
		auth a
		JOIN
		company c
		ON
		a.company_seq = c.company_seq
		<where>
			<if test="employeeSeq == 999">
				1=1
			</if>
			<if test="companySeq != null and companySeq !=''">
				AND a.company_seq = #{companySeq}
			</if>
			<if test="employeeSeq != 999">
				AND NOT a.auth_seq IN(999)
			</if>
			<if test="authName != null and authName !=''">
				AND(
				a.auth_name like CONCAT('%',#{authName},'%')
				OR
				a.auth_code like
				CONCAT('%',#{authName},'%')
				)
			</if>
		</where>
		ORDER BY
		a.company_seq asc
		LIMIT #{startPgNum},#{endPgNum}

	</select>

	<select id="getCountByCompany"
		parameterType="com.example.backend.dto.mapping.AuthEmployeeDto"
		resultType="INTEGER">
		SELECT
		SUM(res.cnt)
		FROM
		(SELECT
		COUNT(distinct a.auth_seq) AS
		cnt
		FROM
		auth
		a
		JOIN
		company c
		ON
		a.company_seq = c.company_seq
		<where>
			<if test="employeeSeq == 999">
				1=1
			</if>
			<if test="companySeq != null and companySeq !=''">
				AND a.company_seq = #{companySeq}
			</if>
			<if test="employeeSeq != 999">
				AND NOT a.auth_seq IN(999)
			</if>
			<if test="authName != null and authName !=''">
				AND(
				a.auth_name like CONCAT('%',#{authName},'%')
				OR
				a.auth_code like
				CONCAT('%',#{authName},'%'))
			</if>
		</where>
		GROUP BY a.company_seq
		) res
	</select>

	<select id="getAuthListByAuth"
		parameterType="com.example.backend.dto.mapping.AuthEmployeeDto"
		resultMap="authEmployeeMap">
		SELECT
		ae.auth_seq, de.company_seq, de.workplace_seq,
		d.department_seq,
		de.employee_seq,
		de.sub_department_seq, de.title,
		d.department_name,e.employee_name,
		c.company_name, w.workplace_name,
		e.employee_id
		FROM
		department_employee de
		JOIN
		auth_employee ae
		ON
		de.employee_seq = ae.employee_seq
		JOIN
		department d
		ON
		d.department_seq =
		de.department_seq
		JOIN
		employee e
		ON
		de.employee_seq = e.employee_seq
		JOIN
		company c
		ON
		de.company_seq = c.company_seq
		JOIN
		workplace w
		ON
		de.workplace_seq = w.workplace_seq
		WHERE
		auth_seq = #{authSeq}
		<if test="companySeq != null and companySeq !=''">
			AND de.company_seq = #{companySeq}
		</if>
	</select>


	<select id="getMenuListByAuthEmployee"
		parameterType="com.example.backend.dto.mapping.AuthEmployeeDto"
		resultMap="authEmployeeMap">
		SELECT distinct m.menu_seq, m.menu_code, m.menu_name, m.menu_parent,
		m.menu_depth, m.menu_url from
		auth_menu am
		JOIN
		auth_employee ae
		on
		am.auth_seq = ae.auth_seq
		JOIN menu m
		ON
		am.menu_seq = m.menu_seq
		<where>
			<if test="companySeq != null and companySeq !=''">
				AND ae.company_seq = #{companySeq}
			</if>
			<if test="workplaceSeq != null and workplaceSeq !=''">
				AND ae.workplace_seq = #{workplaceSeq}
			</if>
			<if test="departmentSeq != null and departmentSeq !=''">
				AND ae.department_seq = #{departmentSeq}
			</if>
			<if test="employeeSeq != null and employeeSeq !=''">
				AND ae.employee_seq = #{employeeSeq}
			</if>
			<if test="menuParent != null and menuParent !=''">
				AND m.menu_parent = #{menuParent}
			</if>
		</where>
	</select>

	<select id="origin"
		parameterType="com.example.backend.dto.mapping.AuthEmployeeDto"
		resultMap="authEmployeeMap">
		SELECT
		auth_seq, employee_seq, company_seq,workplace_seq,
		department_seq
		FROM
		auth_employee
		where
		auth_seq = #{authSeq}
		and
		company_seq = #{companySeq}
	</select>

	<insert id="add" parameterType="java.util.List">
		INSERT INTO auth_employee(auth_seq, employee_seq, company_seq,
		workplace_seq, department_seq) VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.authSeq},#{item.employeeSeq},#{item.companySeq},#{item.workplaceSeq},#{item.departmentSeq})
		</foreach>
	</insert>

	<delete id="remove" parameterType="java.util.List">
		DELETE FROM auth_employee WHERE
		<foreach collection="list" item="item" open="" close=""
			separator="OR">
			(
			auth_seq = #{item.authSeq}
			and
			employee_seq =
			#{item.employeeSeq}
			and
			company_seq = #{item.companySeq}
			and
			workplace_seq = #{item.workplaceSeq}
			and
			department_seq =
			#{item.departmentSeq})
		</foreach>
	</delete>

</mapper> 